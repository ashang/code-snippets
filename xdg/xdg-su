#!/bin/sh
#---------------------------------------------
#   xdg-su
#
#   Utility script to run a command as an alternate user, generally
#       the root user, with a graphical prompt for the root
#       password if needed
#
#   Refer to the usage() function below for usage.
#
#   Copyright 2006, Jeremy White <jwhite@codeweavers.com>
#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
#   Copyright 2009, Aurelien Lefebvre <alefebvre@mandriva.com>
#   Copyright 2010-2013, Atilla ÖNTAŞ <tarakbumba@gmail.com>
#
#   LICENSE:
#
#   Permission is hereby granted, free of charge, to any person obtaining a
#   copy of this software and associated documentation files (the "Software"),
#   to deal in the Software without restriction, including without limitation
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
#   and/or sell copies of the Software, and to permit persons to whom the
#   Software is furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included
#   in all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#   OTHER DEALINGS IN THE SOFTWARE.
#
#   Permission is hereby granted, free of charge, to any person obtaining a
#   copy of this software and associated documentation files (the "Software"),
#   to deal in the Software without restriction, including without limitation
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
#   and/or sell copies of the Software, and to permit persons to whom the
#   Software is furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included
#   in all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#   OTHER DEALINGS IN THE SOFTWARE.
#
#---------------------------------------------
# Application version
VERSION="1.2.2"

#Detect if we running *buntu or something else
distrib=$(test -f /etc/lsb-release && 
	  cat /etc/lsb-release | 
	  grep "DISTRIB_ID" | 
	  sed 's/DISTRIB_ID=\([A-Za-z]\)/\1/')

if [ -z $distrib ]; then
  distrib="Unknown"
fi

# Check if xdg-sudo is exists 
if test -f /etc/xdg-sudo; then 
  distrib="Ubuntu"
fi
  
manualpage()
{
cat << _MANUALPAGE
Name

   xdg-su - run a GUI program as root after prompting for the root password

Synopsis

   xdg-su [-s] [-x] user command

   xdg-su { --help | --manual | --version }

Description

   xdg-su provides a graphical dialog that prompts the user for a password to
   run command as user or as root if no user was specified.

   xdg-su is for use inside a desktop session only.

   xdg-su discards any stdout and stderr output from command.

   You can create an empty "xdg-sudo" file in /etc to use sudo as default to
   override default "su" mechanism and can avoid using "-s" option.

Options

   user
           run command as user. The default is to run as root.

   -s
           run command via sudo

   -x
           run command via su. If sudo is default.

   --help
           Show command synopsis.

   --manual
           Show this manualpage.

   --version
           Show the xdg-utils version information.

Exit Codes

   An exit code of 0 indicates success while a non-zero exit code indicates
   failure. The following failure codes can be returned:

   1
           Error in command line syntax.

   2
           One of the files passed on the command line did not exist.

   3
           A required tool could not be found.

   4
           The action failed.

See Also

   su(1)

   sudo

Examples

 xdg-su -s user -c "/opt/shinythings/bin/install-GUI --install fast"

   Runs the /opt/shinythings/bin/install-GUI command as "user" via sudo.
Name

xdg-su - run a GUI program as root after prompting for the root password

Synopsis

xdg-su [-s] [-x]  [ user] command

xdg-su { --help | --manual | --version }

Description

xdg-su provides a graphical dialog that prompts the user for a password to run
command as user or as root if no user was specified.

xdg-su is for use inside a desktop session only.

xdg-su discards any stdout and stderr output from command.

Options

 user
    run command as this user. The default is to run as root.
-s
    run command via sudo. Ubuntu users don't need this option.
    You can create an empty "xdg-sudo" file in /etc to use sudo
    as default to override default and avoid using this option.
-x 
   run commad is su. If an /etc/xdg-sudo file created by user but,
   user needs to run command via "su" should use this option.
--help
    Show command synopsis.
--manual
    Show this manualpage.
--version
    Show the xdg-utils version information.

Exit Codes

An exit code of 0 indicates success while a non-zero exit code indicates
failure. The following failure codes can be returned:

1
    Error in command line syntax.
2
    One of the files passed on the command line did not exist.
3
    A required tool could not be found.
4
    The action failed.

See Also

su(1)

Examples

xdg-su "/opt/shinythings/bin/install-GUI --install fast"

Runs the /opt/shinythings/bin/install-GUI command with root permissions.

xdg-su computer_user "/opt/shinythings/bin/install-GUI --install fast"

Runs the /opt/shinythings/bin/install-GUI command as computer_user.

xdg-su -s  "/opt/shinythings/bin/install-GUI --install fast"

Runs the /opt/shinythings/bin/install-GUI command with root permissions via sudo.

xdg-su -s  computer_user "/opt/shinythings/bin/install-GUI --install fast"

Runs the /opt/shinythings/bin/install-GUI command as computer_user via sudo.

xdg-su -x  "/opt/shinythings/bin/install-GUI --install fast"

If an /etc/xdg-sudo file exist then runs the /opt/shinythings/bin/install-GUI 
command with root permissions using "su".

xdg-su -x  computer_user "/opt/shinythings/bin/install-GUI --install fast"

If an /etc/xdg-sudo file exist then runs the /opt/shinythings/bin/install-GUI 
command as computer_user using "su".

_MANUALPAGE
}

usage()
{
cat << _USAGE
   xdg-su - run a GUI program as root after prompting for the root password

Synopsis

   xdg-su [-s] [-x] user command

   xdg-su { --help | --manual | --version }

xdg-su - run a GUI program as root after prompting for the root password
Create an empty "xdg-sudo" file in /etc to use sudo as default.

Synopsis

xdg-su [-s] [-x]  [ user] command

xdg-su { --help | --manual | --version }

_USAGE
}

#----------------------------------------------------------------------------
#   Common utility functions included in all XDG wrapper scripts
#----------------------------------------------------------------------------

DEBUG()
{
  [ -z "${XDG_UTILS_DEBUG_LEVEL}" ] && return 0;
  [ ${XDG_UTILS_DEBUG_LEVEL} -lt $1 ] && return 0;
  shift
  echo "$@" >&2
}

#-------------------------------------------------------------
# Exit script on successfully completing the desired operation

exit_success()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    exit 0
}


#-----------------------------------------
# Exit script on malformed arguments, not enough arguments
# or missing required option.
# prints usage information

exit_failure_syntax()
{
    if [ $# -gt 0 ]; then
        echo "xdg-su: $@" >&2
        echo "Try 'xdg-su --help' for more information." >&2
    else
        usage
        echo "Use 'man xdg-su' or 'xdg-su --manual' for additional info."
    fi

    exit 1
}

#-------------------------------------------------------------
# Exit script on missing file specified on command line

exit_failure_file_missing()
{
    if [ $# -gt 0 ]; then
        echo "xdg-su: $@" >&2
    fi

    exit 2
}

#-------------------------------------------------------------
# Exit script on failure to locate necessary tool applications

exit_failure_operation_impossible()
{
    if [ $# -gt 0 ]; then
        echo "xdg-su: $@" >&2
    fi

    exit 3
}

#-------------------------------------------------------------
# Exit script on failure returned by a tool application

exit_failure_operation_failed()
{
    if [ $# -gt 0 ]; then
        echo "xdg-su: $@" >&2
    fi

    exit 4
}

#------------------------------------------------------------
# Exit script on insufficient permission to read a specified file

exit_failure_file_permission_read()
{
    if [ $# -gt 0 ]; then
        echo "xdg-su: $@" >&2
    fi

    exit 5
}

#------------------------------------------------------------
# Exit script on insufficient permission to read a specified file

exit_failure_file_permission_write()
{
    if [ $# -gt 0 ]; then
        echo "xdg-su: $@" >&2
    fi

    exit 6
}

check_input_file()
{
    if [ ! -e "$1" ]; then
        exit_failure_file_missing "file '$1' does not exist"
    fi
    if [ ! -r "$1" ]; then
        exit_failure_file_permission_read "no permission to read file '$1'"
    fi
}

check_vendor_prefix()
{
    file_label="$2"
    [ -n "$file_label" ] || file_label="filename"
    file=`basename "$1"`
    case "$file" in
       [a-zA-Z]*-*)
         return
         ;;
    esac

    echo "xdg-su: $file_label '$file' does not have a proper vendor prefix" >&2
    echo 'A vendor prefix consists of alpha characters ([a-zA-Z]) and is terminated' >&2
    echo 'with a dash ("-"). An example '"$file_label"' is '"'example-$file'" >&2
    echo "Use --novendor to override or 'xdg-su --manual' for additional info." >&2
    exit 1
}

check_output_file()
{
    # if the file exists, check if it is writeable
    # if it does not exists, check if we are allowed to write on the directory
    if [ -e "$1" ]; then
        if [ ! -w "$1" ]; then
            exit_failure_file_permission_write "no permission to write to file '$1'"
        fi
    else
        DIR=`dirname "$1"`
        if [ ! -w "$DIR" -o ! -x "$DIR" ]; then
            exit_failure_file_permission_write "no permission to create file '$1'"
        fi
    fi
}

#----------------------------------------
# Checks for shared commands, e.g. --help

check_common_commands()
{
    while [ $# -gt 0 ] ; do
        parm="$1"
        shift

        case "$parm" in
            --help)
            usage
            echo "Use 'man xdg-su' or 'xdg-su --manual' for additional info."
            exit_success
            ;;

            --manual)
            manualpage
            exit_success
            ;;

            --version)
            echo "xdg-su $VERSION"
            exit_success
            ;;
        esac
    done
}

check_common_commands "$@"

[ -z "${XDG_UTILS_DEBUG_LEVEL}" ] && unset XDG_UTILS_DEBUG_LEVEL;
if [ ${XDG_UTILS_DEBUG_LEVEL-0} -lt 1 ]; then
    # Be silent
    xdg_redirect_output=" > /dev/null 2> /dev/null"
else
    # All output to stderr
    xdg_redirect_output=" >&2"
fi

#--------------------------------------
# Checks for known desktop environments
# set variable DE to the desktop environments name, lowercase

detectDE()
{
  if [ x$DISPLAY != x ] ; then
      if [ x"$KDE_FULL_SESSION" = x"true" ]; then DE=kde;
      elif [ x"$GNOME_DESKTOP_SESSION_ID" != x"" ]; then DE=gnome;
      elif $(dbus-send --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.GetNameOwner string:org.gnome.SessionManager > /dev/null 2>&1) ; then DE=gnome;
      elif xprop -root _DT_SAVE_MODE 2> /dev/null | grep ' = \"xfce4\"$' >/dev/null 2>&1; then DE=xfce;
      elif [[ $(ps aux) =~ ""lxsession"" ]]; then DE=lxde;
      elif [[ $(ps aux) =~ ""mate-session"" ]]; then DE=mate;
      fi
  else
      exit_failure_operation_impossible "FATAL ERROR: You' re not running X server.  No use of graphical environment. Exiting ..." 
  fi
}

#----------------------------------------------------------------------------
# kfmclient exec/openURL can give bogus exit value in KDE <= 3.5.4
# It also always returns 1 in KDE 3.4 and earlier
# Simply return 0 in such case

kfmclient_fix_exit_code()
{
    version=$(kde${KDE_SESSION_VERSION}-config --version 2>/dev/null | grep KDE)
    major=`echo $version | sed 's/KDE: \([0-9]\).*/\1/'`
    minor=`echo $version | sed 's/KDE: [0-9]*\.\([0-9]\).*/\1/'`
    release=`echo $version | sed 's/KDE: [0-9]*\.[0-9]*\.\([0-9]\).*/\1/'`
    test "$major" -gt 3 && return $1
    test "$minor" -gt 5 && return $1
    test "$release" -gt 4 && return $1
    return 0
}

sudo_gnome()
{
    GSU=$(which gksudo 2>/dev/null)
    if [ $? -eq 0 ] ; then
        if [ -z "$user" ] ; then
            $GSU "$cmd"
        else
            $GSU -u "$user" "$cmd"
        fi

        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        su_generic
    fi
}

sudo_kde()
{
    KDESUDO=$(which kdesudo 2>/dev/null)
    if [ x"$KDE_SESSION_VERSION" = x"4" ]; then
        KDESU=$(kde4-config --locate kdesu --path exe 2>/dev/null)
    else
        KDESU=$(which kdesu 2>/dev/null)
    fi
    if [ -z "$KDESUDO" ] ; then
      KDE_SU=$KDESU
    else
      KDE_SU=$KDESUDO
    fi
    if [ $? -eq 0 ] ; then
        if [ -z "$user" ] ; then
            $KDE_SU "$cmd"
        else
            $KDE_SU -u "$user" "$cmd"
        fi

        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        su_generic
    fi
}

su_kde()
{
    if [ x"$KDE_SESSION_VERSION" = x"4" ]; then
        KDE_SU=$(kde4-config --locate kdesu --path exe 2>/dev/null)
    else
        KDE_SU=$(which kdesu 2>/dev/null)
        if [ $? -ne 0 -a $distrib = "Ubuntu" ] ; then
            KDE_SU=$(which kdesudo 2>/dev/null)
	else
	    KDE_SU=$(which kdesu 2>/dev/null)
        fi
    fi
    if [ $? -eq 0 ] ; then
        if [ -z "$user" ] ; then
             if [ $distrib = "Ubuntu" ]; then
                  $KDE_SU "$cmd"
             else
                  $KDE_SU -c "$cmd"
             fi
        else
             if [ $distrib = "Ubuntu" ]; then
                  $KDE_SU -u "$user" "$cmd"
             else
                  $KDE_SU -u "$user" -c "$cmd"
             fi
        fi

        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        su_generic
    fi
}

su_gnome()
{
    GSU=$(which gnomesu 2>/dev/null)
    if [ $? -ne 0 ] ; then
    	GSU=$(which gksu 2>/dev/null)
    else
        GSU=$(which xsu 2>/dev/null)
    fi
    if [ $? -eq 0 ] ; then
        if [ -z "$user" ] ; then
            	if echo $GSU | grep gksu; then
            		$GSU "$cmd"
            	else
            		$GSU -c "$cmd"
            	fi
        else
        	if echo $GSU | grep gksu; then
            		$GSU -u "$user" "$cmd"
            	else
            		$GSU -u "$user" -c "$cmd"
            	fi
        fi

        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        su_generic
    fi
}

su_xfce()
{
        if [ $distrib = "Ubuntu" ]; then
            sudo_gnome
        else
            su_gnome
        fi
}

su_ktsuss()
{

    KTSUSS=$(which ktsuss 2> /dev/null)
    if [ $? -eq 0 ] ; then
        $KTSUSS -u "$user" -c "$cmd"
        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        echo "Ktsuss not found; attempting to use BeeSu" && su_beesu
    fi
}

su_gksu_polkit()
{

    SU_GKSU_POLKIT=$(which gksu-polkit 2> /dev/null)
    if [ $? -eq 0 ] ; then
        $SU_GKSU_POLKIT $cmd
        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        echo "GKsu-Polkit not found attempting to use command line" && su_generic
    fi
}

su_beesu()
{

    BEESU=$(which beesu 2> /dev/null)
    if [ $? -eq 0 ] ; then
        $BEESU "$cmd"
        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        echo "BeeSu not found attepting to use GKsu-polkit" && su_gksu_polkit
    fi
}


su_generic()
{
    
    QUOTE=1
    TERMINAL=""
    [ -z "$TERMINAL" ] && TERMINAL=$(which xterm 2> /dev/null) && QUOTE=0
    [ -z "$TERMINAL" ] && TERMINAL=$(which gnome-terminal 2> /dev/null)
    #[ -z "$TERMINAL" ] && TERMINAL=$(which konsole 2> /dev/null)
    [ -z "$TERMINAL" ] && TERMINAL=$(which aterm 2> /dev/null) && QUOTE=0
    [ -z "$TERMINAL" ] && TERMINAL=$(which Eterm 2> /dev/null) 
    [ -z "$TERMINAL" ] && TERMINAL=$(which kterm 2> /dev/null ) && QUOTE=0
    [ -z "$TERMINAL" ] && TERMINAL=$(which lxterminal 2> /dev/null)
    [ -z "$TERMINAL" ] && TERMINAL=$(which Terminal 2> /dev/null) && QUOTE=0
    [ -z "$TERMINAL" ] && TERMINAL=$(which mate-terminal 2> /dev/null)

    if [ $distrib = "Ubuntu" ]; then
	 if [ $QUOTE -eq 1 ]; then
              $TERMINAL -e "sudo -H $cmd"
	 else
	    if  [ $TERMINAL = $(which Terminal 2> /dev/null) ]; then
	      $TERMINAL -H -x sudo -H "$cmd"
	   else
	      $TERMINAL -e sudo -H "$cmd"
	   fi
	 fi
    else
	 if [ $QUOTE -eq 1 ]; then
	      $TERMINAL -e "su -c \"$cmd\""
	 else
	    if  [ $TERMINAL = $(which Terminal 2> /dev/null) ]; then
	      $TERMINAL  -x  su -c "$cmd"
	   else
	      $TERMINAL -e su -c "$cmd"
	   fi
	 fi
    fi

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

userX ()
{
        if [ -z "$1" ] ; then
            exit_failure_syntax "user argument missing for -u"
        fi
        user="$1"
}

check_sudo ()
{
        if [ -z "$(which sudo 2>/dev/null)" ] ; then
            echo "xdg-su:   Sudo not found. Please install it to use this option. Defaulting to \"su\"

" 
            distrib="Unknown"
        else
            distrib="Ubuntu"
        fi
}


run_DE()
{
detectDE
if [ x"$DE" = x"" ]; then
    DE=generic
fi

case "$DE" in
    kde)
        if [ $distrib = "Ubuntu" ]; then
            sudo_kde
        else
            su_kde
        fi
    ;;

    gnome*|lxde*|xfce|mate*)
        if [ $distrib = "Ubuntu" ]; then
            sudo_gnome
        else
            su_gnome
        fi
    ;;

    generic)
    su_ktsuss
    ;;

     *)
    [ x"$user" = x"" ] && user=root 
    exit_failure_operation_impossible "no graphical method available for invoking '$cmd' as '$user'"
    ;;
esac
}         

cmdX()
{
        if [ -z "$1" ] ; then
            exit_failure_syntax "command argument missing for -c"
        fi
        cmd="$1"
        shift
        run_DE
}

[ x"$1" != x"" ] || exit_failure_syntax

# user=
# cmd=
while [ $# -gt 0 ] ; do
    parm="$1"
    

    case "$parm" in
     
      -s)
        check_sudo
        shift
        if [ $# -ge 2 ]; then
	  userX  "$1"
	  shift
	  cmdX "$1"
	  shift
        else
	  cmdX "$1"
	  shift
        fi

        ;;

     -x)
        distrib="Unknown"
        shift
        if [ $# -ge 2 ]; then
	  userX  "$1"
	  shift
	  cmdX "$1"
	  shift
        else
	  cmdX "$1"
	  shift
        fi
        ;;

      -*)
        exit_failure_syntax "unexpected option '$parm'"
        ;;

      *)
	 if [ $# -ge 2 ]; then
	  if [ -z "$(which $2 2>/dev/null)" ] ; then
	    exit_failure_syntax "unexpected argument '$parm'"
	  else
	      userX  "$1"
	      shift
	      cmdX "$1"
	      shift
	  fi
	else
	  if [ -z "$(which $1 2>/dev/null)" ] ; then
	    exit_failure_syntax "unexpected argument '$parm'"
	  else
	    cmdX "$1"
	    shift
	  fi
	fi
        ;;
    
    esac
done

if [ -z "${cmd}" ] ; then
    exit_failure_syntax "command missing"
fi
